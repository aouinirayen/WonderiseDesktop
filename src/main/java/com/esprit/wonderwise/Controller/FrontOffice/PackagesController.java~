package com.esprit.wonderwise.Controller.FrontOffice;

import com.esprit.wonderwise.Model.offre;
import com.esprit.wonderwise.Services.OffreService;
import com.esprit.wonderwise.Services.WeatherService;
import javafx.animation.FadeTransition;
import javafx.animation.ParallelTransition;
import javafx.animation.ScaleTransition;
import javafx.animation.TranslateTransition;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.shape.SVGPath;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class PackagesController {

    @FXML
    private FlowPane offersPane;

    @FXML
    private VBox detailsPane;

    @FXML
    private VBox emptyState;

    @FXML
    private StackPane loadingPane;

    @FXML
    private ScrollPane detailsScrollPane;

    @FXML
    private OfferDetailsController offerDetailsController;

    @FXML
    private TextField searchField;

    private OffreService offreService = new OffreService();
    private WeatherService weatherService = new WeatherService();
    private ObservableList<offre> allOffres = FXCollections.observableArrayList();
    private FilteredList<offre> filteredOffres;
    private LocalDate selectedDate;

    @FXML
    public void initialize() {
        emptyState.setVisible(false);
        offersPane.getChildren().clear();

        // Initialize calendar controller reference
        // if (calendarController != null) {
        //     calendarController.setPackagesController(this);
        // }

        // Configure search field
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            filterOffers(newValue);
        });

        // Load offers asynchronously
        CompletableFuture.runAsync(this::loadOffersAsync);
    }

    public void filterByDate(LocalDate date) {
        System.out.println("Filtering by date: " + date); // Debug log
        this.selectedDate = date;
        filterOffers(searchField.getText());
    }

    private void filterOffers(String searchText) {
        if (allOffres.isEmpty()) {
            System.out.println("No offers loaded yet"); // Debug log
            return;
        }

        if (filteredOffres == null) {
            filteredOffres = new FilteredList<>(allOffres);
        }

        filteredOffres.setPredicate(offre -> {
            boolean matchesSearch = true;
            boolean matchesDate = true;

            // Apply search filter
            if (searchText != null && !searchText.trim().isEmpty()) {
                String searchLower = searchText.toLowerCase();
                matchesSearch = offre.getTitre().toLowerCase().contains(searchLower) ||
                              offre.getDescription().toLowerCase().contains(searchLower);
            }

            // Apply date filter
            if (selectedDate != null) {
                LocalDate debut = offre.getDateDebut().toLocalDate();
                LocalDate fin = offre.getDateFin().toLocalDate();
                matchesDate = !selectedDate.isBefore(debut) && !selectedDate.isAfter(fin);
                System.out.println("Checking offer " + offre.getTitre() + 
                                 " (from " + debut + " to " + fin + 
                                 ") against " + selectedDate + 
                                 ": matches = " + matchesDate); // Debug log
            }

            return matchesSearch && matchesDate;
        });

        System.out.println("Filtered offers count: " + filteredOffres.size()); // Debug log
        displayOffers(filteredOffres.stream().collect(Collectors.toList()));
        
        // Show/hide empty state
        emptyState.setVisible(filteredOffres.isEmpty());
        emptyState.setManaged(filteredOffres.isEmpty());
    }

    private void loadOffersAsync() {
        try {
            List<offre> offers = offreService.readAll();
            Platform.runLater(() -> {
                allOffres.setAll(offers);
                filteredOffres = new FilteredList<>(allOffres);
                displayOffers(offers);
                loadingPane.setVisible(false);
                System.out.println("Loaded " + offers.size() + " offers"); // Debug log
            });
        } catch (SQLException e) {
            e.printStackTrace();
            Platform.runLater(() -> {
                loadingPane.setVisible(false);
                // Show error state
                emptyState.setVisible(true);
                emptyState.setManaged(true);
            });
        }
    }

    private void displayOffers() {
        offersPane.getChildren().clear();

        // Animation delay between cards for staggered effect
        int delayIndex = 0;

        for (offre offre : allOffres) {
            VBox card = createOfferCard(offre);

            // Add staggered animation
            int delay = delayIndex * 100; // 100ms delay between each card
            FadeTransition fadeIn = new FadeTransition(Duration.millis(400), card);
            fadeIn.setFromValue(0);
            fadeIn.setToValue(1);
            fadeIn.setDelay(Duration.millis(delay));

            TranslateTransition slideIn = new TranslateTransition(Duration.millis(400), card);
            slideIn.setFromY(20);
            slideIn.setToY(0);
            slideIn.setDelay(Duration.millis(delay));

            // Add card to container
            offersPane.getChildren().add(card);

            // Start animations
            fadeIn.play();
            slideIn.play();

            delayIndex++;
        }
    }

    private void displayOffers(List<offre> offers) {
        offersPane.getChildren().clear();

        // Animation delay between cards for staggered effect
        int delayIndex = 0;

        for (offre offre : offers) {
            VBox card = createOfferCard(offre);

            // Add staggered animation
            int delay = delayIndex * 100; // 100ms delay between each card
            FadeTransition fadeIn = new FadeTransition(Duration.millis(400), card);
            fadeIn.setFromValue(0);
            fadeIn.setToValue(1);
            fadeIn.setDelay(Duration.millis(delay));

            TranslateTransition slideIn = new TranslateTransition(Duration.millis(400), card);
            slideIn.setFromY(20);
            slideIn.setToY(0);
            slideIn.setDelay(Duration.millis(delay));

            // Add card to container
            offersPane.getChildren().add(card);

            // Start animations
            fadeIn.play();
            slideIn.play();

            delayIndex++;
        }
    }

    private VBox createOfferCard(offre offre) {
        VBox card = new VBox(10);
        card.getStyleClass().add("card");
        card.setAlignment(Pos.CENTER);

        // Image container with weather overlay
        StackPane imageContainer = new StackPane();
        imageContainer.getStyleClass().add("image-container");

        // Create background with image
        ImageView imageView = new ImageView();
        try {
            String imagePath = offre.getImage();
            if (imagePath != null && !imagePath.isEmpty()) {
                String fullPath = "src/main/resources" + imagePath;
                File imageFile = new File(fullPath);
                if (imageFile.exists()) {
                    Image image = new Image(imageFile.toURI().toString());
                    imageView.setImage(image);
                    imageView.setFitWidth(300);
                    imageView.setFitHeight(200);
                    imageView.setPreserveRatio(true);
                }
            }
        } catch (Exception e) {
            System.err.println("Erreur lors du chargement de l'image: " + e.getMessage());
        }

        createWeatherOverlay(imageContainer, imageView, offre);

        // Contenu
        VBox content = new VBox(8);
        content.setAlignment(Pos.CENTER);

        Label titleLabel = new Label(offre.getTitre());
        titleLabel.getStyleClass().add("card-title");

        Label priceLabel = new Label(String.format("%.2f TND", offre.getPrix()));
        priceLabel.getStyleClass().add("card-price");

        // Système de notation
        HBox ratingContainer = new HBox(5);
        ratingContainer.getStyleClass().add("rating-container");
        ratingContainer.setAlignment(Pos.CENTER);

        // Création du label de rating
        double currentRating = offre.getRating() != null ? offre.getRating() : 0.0;
        int voteCount = offre.getRatingCount() != null ? offre.getRatingCount() : 0;
        Label ratingLabel = new Label(String.format("%.1f/5 (%d votes)", currentRating, voteCount));
        ratingLabel.getStyleClass().add("rating-label");

        // Création des étoiles
        HBox stars = new HBox(2);
        stars.getStyleClass().add("rating-stars");

        for (int i = 1; i <= 5; i++) {
            final int starValue = i;
            SVGPath star = new SVGPath();
            star.setContent("M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z");
            star.getStyleClass().add("star");

            // Colorer l'étoile en fonction du rating actuel
            if (i <= currentRating) {
                star.getStyleClass().add("filled");
            }

            star.setOnMouseClicked(event -> {
                offre.setRating((double) starValue);
                if (offre.getRatingCount() == null) {
                    offre.setRatingCount(1);
                } else {
                    offre.setRatingCount(offre.getRatingCount() + 1);
                }

                updateStarRatings(stars, starValue);
                ratingLabel.setText(String.format("%.1f/5 (%d votes)",
                        offre.getRating(),
                        offre.getRatingCount()));

                try {
                    offreService.updateRating(offre.getId(), offre.getRating(), offre.getRatingCount());
                } catch (SQLException e) {
                    showAlert("Erreur", "Impossible de sauvegarder la note : " + e.getMessage());
                }
            });

            stars.getChildren().add(star);
        }

        ratingContainer.getChildren().addAll(stars, ratingLabel);

        VBox dateContainer = new VBox(5);
        dateContainer.getStyleClass().add("date-container");

        HBox startDateBox = new HBox(5);
        Label startDateLabel = new Label("Du:");
        startDateLabel.getStyleClass().add("date-label");
        Label startDate = new Label(offre.getDateDebut().toLocalDate().toString());
        startDate.getStyleClass().add("date-info");
        startDateBox.getChildren().addAll(startDateLabel, startDate);

        HBox endDateBox = new HBox(5);
        Label endDateLabel = new Label("Au:");
        endDateLabel.getStyleClass().add("date-label");
        Label endDate = new Label(offre.getDateFin().toLocalDate().toString());
        endDate.getStyleClass().add("date-info");
        endDateBox.getChildren().addAll(endDateLabel, endDate);

        dateContainer.getChildren().addAll(startDateBox, endDateBox);

        // Places disponibles avec indication visuelle si peu de places
        Label placesLabel = new Label(offre.getPlacesDisponibles() + " places disponibles");
        placesLabel.getStyleClass().add("available-places");
        if (offre.getPlacesDisponibles() < 5) {
            placesLabel.getStyleClass().add("low-places");
        }

        // Conteneur pour les boutons
        HBox buttonContainer = new HBox(10);
        buttonContainer.getStyleClass().add("button-container");
        buttonContainer.setAlignment(Pos.CENTER);

        Button detailsButton = new Button("Détails");
        detailsButton.getStyleClass().addAll("button", "details-button");

        Button reserveButton = new Button("Réserver");
        reserveButton.getStyleClass().addAll("button", "reserve-button");

        detailsButton.setOnAction(e -> showOfferDetails(offre));

        try {
            ImageView icon = new ImageView(new Image(getClass().getResourceAsStream("/com/esprit/wonderwise/icons/calendar-check.png")));
            icon.setFitWidth(16);
            icon.setFitHeight(16);
            reserveButton.setGraphic(icon);
        } catch (Exception e) {
            System.err.println("Erreur lors du chargement de l'icône : " + e.getMessage());
        }

        reserveButton.setOnAction(e -> {
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/esprit/wonderwise/FrontOffice/AddReservationFront.fxml"));
                Parent reservationForm = loader.load();
                AddReservationFrontController controller = loader.getController();
                controller.initData(offre.getId());

                FadeTransition fadeOut = new FadeTransition(Duration.millis(300), offersPane);
                fadeOut.setFromValue(1.0);
                fadeOut.setToValue(0.0);
                fadeOut.setOnFinished(event -> {
                    offersPane.setVisible(false);
                    detailsScrollPane.setVisible(true);
                    detailsScrollPane.setContent(reservationForm);

                    FadeTransition fadeIn = new FadeTransition(Duration.millis(300), detailsScrollPane);
                    fadeIn.setFromValue(0.0);
                    fadeIn.setToValue(1.0);
                    fadeIn.play();
                });
                fadeOut.play();
            } catch (IOException ex) {
                showAlert("Erreur", "Impossible d'ouvrir le formulaire de réservation : " + ex.getMessage());
            }
        });

        buttonContainer.getChildren().addAll(detailsButton, reserveButton);

        // Ajout de tous les éléments dans l'ordre correct
        content.getChildren().addAll(
                titleLabel,
                priceLabel,
                ratingContainer,
                dateContainer,
                placesLabel,
                buttonContainer
        );

        // Modification de l'assemblage final
        card.getChildren().addAll(imageContainer, content);
        return card;
    }

    private void createWeatherOverlay(StackPane imageContainer, ImageView imageView, offre offre) {
        VBox weatherCard = new VBox(2);
        weatherCard.getStyleClass().add("weather-card");
        
        StackPane.setAlignment(weatherCard, Pos.TOP_RIGHT);
        StackPane.setMargin(weatherCard, new Insets(10));

        imageContainer.getChildren().clear();
        imageContainer.getChildren().addAll(imageView, weatherCard);

        String city = offre.getPays();
        if (city != null) {
            CompletableFuture.supplyAsync(() -> weatherService.getWeatherForCity(city))
                .thenAccept(weather -> {
                    if (weather != null) {
                        Platform.runLater(() -> {
                            try {
                                // Temperature row
                                HBox tempRow = new HBox(4);
                                tempRow.setAlignment(Pos.CENTER_LEFT);

                                Label weatherIcon = new Label(getWeatherIcon(weather.getDescription()));
                                Label tempLabel = new Label(String.format("%.0f°", weather.getTemperature()));
                                tempLabel.getStyleClass().add("temp-value");

                                tempRow.getChildren().addAll(weatherIcon, tempLabel);

                                // City name
                                Label cityLabel = new Label(city);
                                cityLabel.getStyleClass().add("location");

                                // Details row
                                HBox detailsRow = new HBox(4);
                                detailsRow.setAlignment(Pos.CENTER_LEFT);

                                // Humidity
                                HBox humidityBox = new HBox(2);
                                humidityBox.getStyleClass().add("detail-box");
                                Label humidityIcon = new Label("💧");
                                Label humidityValue = new Label(String.format("%.0f%%", weather.getHumidity()));
                                humidityValue.getStyleClass().add("value");
                                humidityBox.getChildren().addAll(humidityIcon, humidityValue);

                                // Wind
                                HBox windBox = new HBox(2);
                                windBox.getStyleClass().add("detail-box");
                                Label windIcon = new Label("💨");
                                Label windValue = new Label(String.format("%.0f", weather.getWindSpeed() * 3.6));
                                windValue.getStyleClass().add("value");
                                windBox.getChildren().addAll(windIcon, windValue);

                                detailsRow.getChildren().addAll(humidityBox, windBox);
                                weatherCard.getChildren().addAll(tempRow, cityLabel, detailsRow);

                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        });
                    }
                })
                .exceptionally(throwable -> {
                    throwable.printStackTrace();
                    return null;
                });
        }
    }

    private String getWeatherIcon(String description) {
        description = description.toLowerCase();
        if (description.contains("soleil") || description.contains("clair")) {
            return "☀️";
        } else if (description.contains("nuage")) {
            return "⛅";
        } else if (description.contains("pluie")) {
            return "🌧️";
        } else if (description.contains("neige")) {
            return "🌨️";
        } else if (description.contains("orage")) {
            return "⛈️";
        } else if (description.contains("brume") || description.contains("brouillard")) {
            return "🌫️";
        }
        return "🌤️";
    }

    private void updateStarRatings(HBox stars, int rating) {
        for (int i = 0; i < stars.getChildren().size(); i++) {
            SVGPath star = (SVGPath) stars.getChildren().get(i);
            if (i < rating) {
                star.getStyleClass().remove("empty");
                star.getStyleClass().add("filled");
            } else {
                star.getStyleClass().remove("filled");
                star.getStyleClass().add("empty");
            }
        }
    }

    private void showOfferDetails(offre offre) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/esprit/wonderwise/FrontOffice/OfferDetails.fxml"));
            Parent detailsView = loader.load();
            OfferDetailsController controller = loader.getController();
            controller.initData(offre);

            FadeTransition fadeOut = new FadeTransition(Duration.millis(300), offersPane);
            fadeOut.setFromValue(1.0);
            fadeOut.setToValue(0.0);
            fadeOut.setOnFinished(e -> {
                offersPane.setVisible(false);
                detailsScrollPane.setVisible(true);
                detailsScrollPane.setContent(detailsView);

                FadeTransition fadeIn = new FadeTransition(Duration.millis(300), detailsScrollPane);
                fadeIn.setFromValue(0.0);
                fadeIn.setToValue(1.0);
                fadeIn.play();
            });
            fadeOut.play();
        } catch (IOException e) {
            showAlert("Erreur", "Impossible d'afficher les détails de l'offre : " + e.getMessage());
        }
    }

    @FXML
    private void hideDetails() {
        // Animate transition back to offers list
        FadeTransition fadeOut = new FadeTransition(Duration.millis(300), detailsScrollPane);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);
        fadeOut.setOnFinished(e -> {
            detailsScrollPane.setVisible(false);
            offersPane.setVisible(true);

            FadeTransition fadeIn = new FadeTransition(Duration.millis(300), offersPane);
            fadeIn.setFromValue(0.0);
            fadeIn.setToValue(1.0);
            fadeIn.play();
        });
        fadeOut.play();
    }

    // Refresh the offers list - can be called from other controllers
    public void refreshOffers() {
        loadingPane.setVisible(true);
        emptyState.setVisible(false);
        CompletableFuture.runAsync(this::loadOffersAsync);
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private String extractCityFromTitle(String title) {
        if (title == null || title.trim().isEmpty()) {
            return null;
        }

        // Map of common city names and their API-friendly versions
        Map<String, String> cityMap = Map.of(
                "dubai", "Dubai",
                "londres", "London",
                "rome", "Rome",
                "paris", "Paris",
                "tokyo", "Tokyo",
                "new york", "New York",
                "istanbul", "Istanbul",
                "barcelone", "Barcelona",
                "madrid", "Madrid",
                "berlin", "Berlin"
        );

        // Convert title to lowercase for matching
        String lowerTitle = title.toLowerCase();

        // Check for exact matches in our map
        for (Map.Entry<String, String> entry : cityMap.entrySet()) {
            if (lowerTitle.contains(entry.getKey())) {
                return entry.getValue();
            }
        }

        // Try to extract city name from patterns like "Séjour à [City]" or "Trip to [City]"
        String[] patterns = {" à ", " in ", " to "};
        for (String pattern : patterns) {
            if (title.contains(pattern)) {
                String[] parts = title.split(pattern);
                if (parts.length > 1) {
                    String potentialCity = parts[1].split("[^a-zA-Z]")[0].trim();
                    if (!potentialCity.isEmpty()) {
                        return potentialCity;
                    }
                }
            }
        }

        return null;
    }
}