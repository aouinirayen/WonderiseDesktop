package com.esprit.wonderwise.Controller.BackOffice;

import com.esprit.wonderwise.Model.offre;
import com.esprit.wonderwise.Model.reservation;
import com.esprit.wonderwise.Service.OffreService;
import com.esprit.wonderwise.Service.ReservationService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManageReservationsController {

    @FXML
    private VBox reservationsContainer;

    @FXML
    private VBox emptyState;

    @FXML
    private ComboBox<String> sortComboBox;

    @FXML
    private TextField searchField;

    @FXML
    private ComboBox<String> filterComboBox;

    @FXML
    private DatePicker dateFilter;

    private ReservationService reservationService = new ReservationService();
    private OffreService offreService = new OffreService();
    private ObservableList<reservation> reservationsList = FXCollections.observableArrayList();
    private Map<Integer, offre> offresMap = new HashMap<>();
    private BackOfficeController backOfficeController;

    private FilteredList<reservation> filteredReservations;
    private SortedList<reservation> sortedReservations;

    public void setBackOfficeController(BackOfficeController controller) {
        this.backOfficeController = controller;
    }

    @FXML
    public void initialize() {
        filteredReservations = new FilteredList<>(reservationsList, p -> true);
        sortedReservations = new SortedList<>(filteredReservations);

        try {
            List<offre> offres = offreService.readAll();
            offres.forEach(offre -> offresMap.put(offre.getId(), offre));
            
            filterComboBox.getItems().add("Toutes les offres");
            offres.forEach(offre -> filterComboBox.getItems().add(offre.getTitre()));
            filterComboBox.setValue("Toutes les offres");

            loadReservations();
            setupFilters();
            setupSorting();

        } catch (SQLException e) {
            e.printStackTrace();
            showError("Erreur lors du chargement des offres");
        }
    }

    private void loadReservations() {
        try {
            reservationsList.clear();
            List<reservation> reservations = reservationService.readAll();
            reservationsList.addAll(reservations);
            updateReservationsDisplay();
        } catch (SQLException e) {
            e.printStackTrace();
            showError("Erreur lors du chargement des réservations");
        }
    }

    private void updateReservationsDisplay() {
        reservationsContainer.getChildren().clear();
        
        if (sortedReservations.isEmpty()) {
            showEmptyState();
            return;
        }
        
        hideEmptyState();
        for (reservation res : sortedReservations) {
            VBox card = createReservationCard(res);
            reservationsContainer.getChildren().add(card);
        }
    }

    private VBox createReservationCard(reservation res) {
        VBox card = new VBox();
        card.getStyleClass().add("reservation-card");
        card.setSpacing(10);
        card.setPadding(new Insets(15));

        HBox mainContent = new HBox();
        mainContent.setSpacing(15);
        mainContent.setAlignment(Pos.CENTER_LEFT);

        // Client Info
        VBox clientInfo = new VBox();
        clientInfo.setSpacing(5);
        HBox.setHgrow(clientInfo, Priority.ALWAYS);

        Label nameLabel = new Label(res.getNom() + " " + res.getPrenom());
        nameLabel.getStyleClass().add("card-title");

        Label emailLabel = new Label(res.getEmail());
        emailLabel.getStyleClass().add("client-email");

        Label statusBadge = new Label(res.getStatut() != null ? res.getStatut() : "En attente");
        statusBadge.getStyleClass().addAll("status-badge", "status-" + (res.getStatut() != null ? res.getStatut().toLowerCase() : "en-attente"));

        clientInfo.getChildren().addAll(nameLabel, emailLabel, statusBadge);

        // Details
        VBox details = new VBox();
        details.setSpacing(10);
        details.setAlignment(Pos.CENTER);

        HBox detailsContent = new HBox();
        detailsContent.setSpacing(15);

        // Nombre de personnes
        VBox personnesBox = new VBox();
        personnesBox.setSpacing(5);
        Label personnesTitle = new Label("Nombre de personnes");
        personnesTitle.getStyleClass().add("detail-label");
        Label personnesValue = new Label(String.valueOf(res.getNombrePersonne()));
        personnesValue.getStyleClass().add("detail-value");
        personnesBox.getChildren().addAll(personnesTitle, personnesValue);

        // Date
        VBox dateBox = new VBox();
        dateBox.setSpacing(5);
        Label dateTitle = new Label("Date de départ");
        dateTitle.getStyleClass().add("detail-label");
        String dateStr = "Non définie";
        if (res.getDateDepart() != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            dateStr = res.getDateDepart().format(formatter);
        }
        Label dateValue = new Label(dateStr);
        dateValue.getStyleClass().add("detail-value");
        dateBox.getChildren().addAll(dateTitle, dateValue);

        detailsContent.getChildren().addAll(personnesBox, dateBox);
        details.getChildren().add(detailsContent);

        // Actions
        HBox actions = new HBox();
        actions.setSpacing(10);
        actions.setAlignment(Pos.CENTER_RIGHT);

        Button deleteButton = new Button("Supprimer");
        deleteButton.getStyleClass().addAll("button-action", "button-delete");
        deleteButton.setOnAction(e -> deleteReservation(res));

        actions.getChildren().add(deleteButton);

        mainContent.getChildren().addAll(clientInfo, details, actions);
        card.getChildren().add(mainContent);

        return card;
    }

    private void setupFilters() {
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredReservations.setPredicate(reservation -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }

                String lowerCaseFilter = newValue.toLowerCase();
                offre currentOffre = offresMap.get(reservation.getOffreId());
                
                return String.valueOf(reservation.getId()).contains(lowerCaseFilter)
                    || (currentOffre != null && currentOffre.getTitre().toLowerCase().contains(lowerCaseFilter))
                    || reservation.getDateDepart().toString().contains(lowerCaseFilter);
            });
            updateReservationsDisplay();
        });

        filterComboBox.valueProperty().addListener((observable, oldValue, newValue) -> {
            filteredReservations.setPredicate(reservation -> {
                if (newValue == null || newValue.equals("Toutes les offres")) {
                    return true;
                }
                offre currentOffre = offresMap.get(reservation.getOffreId());
                return currentOffre != null && currentOffre.getTitre().equals(newValue);
            });
            updateReservationsDisplay();
        });

        dateFilter.valueProperty().addListener((observable, oldValue, newValue) -> {
            filteredReservations.setPredicate(reservation -> {
                if (newValue == null) {
                    return true;
                }
                return reservation.getDateDepart().equals(newValue);
            });
            updateReservationsDisplay();
        });
    }

    private void setupSorting() {
        sortComboBox.getItems().addAll(
            "Date (plus récent)",
            "Date (plus ancien)",
            "Nombre de personnes",
            "Offre"
        );
        
        sortComboBox.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                switch (newValue) {
                    case "Date (plus récent)":
                        sortedReservations.setComparator((r1, r2) -> r2.getDateDepart().compareTo(r1.getDateDepart()));
                        break;
                    case "Date (plus ancien)":
                        sortedReservations.setComparator((r1, r2) -> r1.getDateDepart().compareTo(r2.getDateDepart()));
                        break;
                    case "Nombre de personnes":
                        sortedReservations.setComparator((r1, r2) -> Integer.compare(r2.getNombrePersonne(), r1.getNombrePersonne()));
                        break;
                    case "Offre":
                        sortedReservations.setComparator((r1, r2) -> {
                            String titre1 = offresMap.get(r1.getOffreId()).getTitre();
                            String titre2 = offresMap.get(r2.getOffreId()).getTitre();
                            return titre1.compareTo(titre2);
                        });
                        break;
                }
                updateReservationsDisplay();
            }
        });
    }

    private void showEmptyState() {
        emptyState.setVisible(true);
        emptyState.setManaged(true);
    }

    private void hideEmptyState() {
        emptyState.setVisible(false);
        emptyState.setManaged(false);
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Erreur");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void openAddReservationForm() {
        backOfficeController.loadContent("/com/esprit/wonderwise/BackOffice/AddReservation.fxml");
    }

    public void refreshReservations() {
        loadReservations();
    }

    public void deleteReservation(reservation res) {
        try {
            reservationService.delete(res.getId());
            loadReservations();
        } catch (SQLException e) {
            e.printStackTrace();
            showError("Erreur lors de la suppression de la réservation");
        }
    }
}