package com.esprit.wonderwise.Controller.BackOffice;

import com.esprit.wonderwise.Model.offre;
import com.esprit.wonderwise.Service.OffreService;
import com.esprit.wonderwise.Service.StatisticsService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

public class ManageOffresController {

    @FXML
    private VBox offresContainer;
    
    @FXML
    private VBox emptyState;

    @FXML
    private Label totalOffresLabel;
    @FXML
    private Label activeOffresLabel;
    @FXML
    private Label popularDestinationLabel;
    @FXML
    private PieChart offresPieChart;

    private final OffreService offreService;
    private final StatisticsService statisticsService;
    private ObservableList<offre> offresList;
    private BackOfficeController backOfficeController;
    private final DateTimeFormatter dateFormatter;

    public ManageOffresController() {
        this.offreService = new OffreService();
        this.statisticsService = new StatisticsService();
        this.offresList = FXCollections.observableArrayList();
        this.dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    }

    // Method to set the BackOfficeController
    public void setBackOfficeController(BackOfficeController controller) {
        this.backOfficeController = controller;
    }

    @FXML
    public void initialize() {
        System.out.println("üöÄ Initialisation du contr√¥leur ManageOffres...");
        
        // Initialize services
        offreService = new OffreService();
        statisticsService = new StatisticsService();
        
        // Initialize observable list
        offresList = FXCollections.observableArrayList();
        
        // Load offers
        try {
            System.out.println("üì• Chargement des offres...");
            loadOffres();
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors du chargement initial : " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void loadOffres() {
        try {
            System.out.println("üîÑ D√©but du chargement des offres...");
            List<offre> offers = offreService.readAll();
            System.out.println("üì¶ Nombre d'offres r√©cup√©r√©es : " + offers.size());
            
            offresList.clear();
            offresList.addAll(offers);
            
            // Display offers
            displayOffres();
            
            // Update statistics
            updateStatistics();
            
            System.out.println("‚úÖ Chargement des offres termin√© avec succ√®s");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL lors du chargement : " + e.getMessage());
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible de charger les offres : " + e.getMessage());
        } catch (Exception e) {
            System.out.println("‚ùå Erreur inattendue lors du chargement : " + e.getMessage());
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Erreur", "Une erreur inattendue s'est produite : " + e.getMessage());
        }
    }

    private void displayOffres() {
        System.out.println("üé® Affichage des offres...");
        
        // Clear existing content
        offresContainer.getChildren().clear();
        
        if (offresList.isEmpty()) {
            System.out.println("‚ÑπÔ∏è Aucune offre √† afficher");
            emptyState.setVisible(true);
            emptyState.setManaged(true);
            return;
        }
        
        System.out.println("üìä Affichage de " + offresList.size() + " offres");
        emptyState.setVisible(false);
        emptyState.setManaged(false);
        
        // Create and add offer cards
        for (offre offre : offresList) {
            try {
                System.out.println("üé¥ Cr√©ation de la carte pour l'offre : " + offre.getTitre());
                Node card = createOfferCard(offre);
                offresContainer.getChildren().add(card);
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Erreur lors de la cr√©ation de la carte pour l'offre " + offre.getId() + " : " + e.getMessage());
            }
        }
    }

    private HBox createOfferCard(offre offre) {
        // Create the main card container
        HBox card = new HBox();
        card.getStyleClass().add("offer-card");
        card.setSpacing(15);
        
        // Left side: Image
        StackPane imageContainer = new StackPane();
        imageContainer.getStyleClass().add("card-image-container");
        HBox.setMargin(imageContainer, new Insets(0, 0, 0, 0));
        
        ImageView imageView = new ImageView();
        imageView.setFitWidth(150);
        imageView.setFitHeight(150);
        imageView.setPreserveRatio(true);
        imageView.getStyleClass().add("card-image");
        
        // Set image if available
        if (offre.getImage() != null && !offre.getImage().isEmpty()) {
            File file = new File(offre.getImage());
            if (file.exists()) {
                imageView.setImage(new Image(file.toURI().toString()));
            } else {
                // Default image
                try {
                    imageView.setImage(new Image(getClass().getResourceAsStream("/com/esprit/wonderwise/icons/default-offer.png")));
                } catch (Exception e) {
                    // If default image can't be loaded, just leave it empty
                }
            }
        } else {
            // Default image
            try {
                imageView.setImage(new Image(getClass().getResourceAsStream("/com/esprit/wonderwise/icons/default-offer.png")));
            } catch (Exception e) {
                // If default image can't be loaded, just leave it empty
            }
        }
        
        imageContainer.getChildren().add(imageView);
        
        // Middle: Offer Details
        VBox contentBox = new VBox();
        contentBox.setSpacing(10);
        contentBox.getStyleClass().add("card-content");
        HBox.setHgrow(contentBox, javafx.scene.layout.Priority.ALWAYS);
        
        // Title and country row
        HBox titleRow = new HBox();
        titleRow.setAlignment(Pos.CENTER_LEFT);
        
        Label titleLabel = new Label(offre.getTitre());
        titleLabel.getStyleClass().add("card-title");
        titleRow.getChildren().add(titleLabel);
        
        Region spacer = new Region();
        HBox.setHgrow(spacer, javafx.scene.layout.Priority.ALWAYS);
        titleRow.getChildren().add(spacer);
        
        Label paysLabel = new Label(offre.getPays());
        paysLabel.getStyleClass().add("card-pays");
        titleRow.getChildren().add(paysLabel);
        
        // Description
        Text descriptionText = new Text(offre.getDescription());
        descriptionText.getStyleClass().add("card-description");
        descriptionText.setWrappingWidth(500);
        
        // Info row
        HBox infoRow = new HBox();
        infoRow.setSpacing(15);
        infoRow.setAlignment(Pos.CENTER_LEFT);
        
        // Price
        VBox priceBox = new VBox();
        priceBox.getStyleClass().add("price-container");
        Label priceLabel = new Label("Prix:");
        priceLabel.getStyleClass().add("price-label");
        Label priceValue = new Label(String.format("%.2f TND", offre.getPrix()));
        priceValue.getStyleClass().add("price-value");
        priceBox.getChildren().addAll(priceLabel, priceValue);
        
        // Places
        VBox placesBox = new VBox();
        placesBox.getStyleClass().add("places-container");
        Label placesLabel = new Label("Places:");
        placesLabel.getStyleClass().add("places-label");
        Label placesValue = new Label(offre.getPlacesDisponibles() + "/" + offre.getNombrePlaces() + " places");
        placesValue.getStyleClass().add("places-value");
        placesBox.getChildren().addAll(placesLabel, placesValue);
        
        // Dates
        VBox datesBox = new VBox();
        datesBox.getStyleClass().add("dates-container");
        Label datesLabel = new Label("P√©riode:");
        datesLabel.getStyleClass().add("dates-label");
        
        // Format dates if they exist
        String dateRange = "";
        if (offre.getDateDebut() != null && offre.getDateFin() != null) {
            dateRange = offre.getDateDebut().format(dateFormatter) + " - " + offre.getDateFin().format(dateFormatter);
        } else {
            dateRange = "Dates non d√©finies";
        }
        
        Label datesValue = new Label(dateRange);
        datesValue.getStyleClass().add("dates-value");
        datesBox.getChildren().addAll(datesLabel, datesValue);
        
        infoRow.getChildren().addAll(priceBox, placesBox, datesBox);
        
        // Add all to content box
        contentBox.getChildren().addAll(titleRow, descriptionText, infoRow);
        
        // Right side: Actions
        VBox actionsBox = new VBox();
        actionsBox.setSpacing(10);
        actionsBox.setAlignment(Pos.CENTER);
        actionsBox.getStyleClass().add("card-actions");
        
        // Edit button
        Button editButton = new Button("Modifier");
        editButton.getStyleClass().addAll("button-action", "button-edit");
        
        try {
            ImageView editIcon = new ImageView(new Image(getClass().getResourceAsStream("/com/esprit/wonderwise/icons/edit.png")));
            editIcon.setFitHeight(12);
            editIcon.setFitWidth(12);
            editButton.setGraphic(editIcon);
        } catch (Exception e) {
            // If icon can't be loaded, just leave button without graphic
        }
        
        editButton.setOnAction(event -> handleEditOffre(offre));
        
        // Delete button
        Button deleteButton = new Button("Supprimer");
        deleteButton.getStyleClass().addAll("button-action", "button-delete");
        
        try {
            ImageView deleteIcon = new ImageView(new Image(getClass().getResourceAsStream("/com/esprit/wonderwise/icons/delete.png")));
            deleteIcon.setFitHeight(12);
            deleteIcon.setFitWidth(12);
            deleteButton.setGraphic(deleteIcon);
        } catch (Exception e) {
            // If icon can't be loaded, just leave button without graphic
        }
        
        deleteButton.setOnAction(event -> handleDeleteOffre(offre));
        
        actionsBox.getChildren().addAll(editButton, deleteButton);
        
        // Add everything to the card
        card.getChildren().addAll(imageContainer, contentBox, actionsBox);
        
        return card;
    }

    @FXML
    private void openAddOffreForm() {
        if (backOfficeController != null) {
            try {
                // Load AddOffre.fxml into the contentPane
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/esprit/wonderwise/BackOffice/AddOffre.fxml"));
                backOfficeController.loadContent(loader); // Use a custom method to load content
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible d'ouvrir le formulaire : " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.ERROR, "Erreur", "BackOfficeController n'est pas d√©fini.");
        }
    }

    private void handleEditOffre(offre offre) {
        if (backOfficeController != null) {
            try {
                // Load AddOffre.fxml into the contentPane
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/esprit/wonderwise/BackOffice/AddOffre.fxml"));
                backOfficeController.loadContent(loader); // Load content first
                AddOffreController controller = loader.getController();
                controller.initData(offre); // Pass offer data for editing
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible d'ouvrir le formulaire : " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.ERROR, "Erreur", "BackOfficeController n'est pas d√©fini.");
        }
    }

    private void handleDeleteOffre(offre offre) {
        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);
        confirm.setTitle("Confirmer la suppression");
        confirm.setHeaderText(null);
        confirm.setContentText("Voulez-vous vraiment supprimer l'offre : " + offre.getTitre() + " ?");
        if (confirm.showAndWait().get() == ButtonType.OK) {
            try {
                offreService.delete(offre.getId());
                offresList.remove(offre);
                loadOffres(); // Reload the cards
                refreshStatistics();
                showAlert(Alert.AlertType.INFORMATION, "Succ√®s", "Offre supprim√©e avec succ√®s.");
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible de supprimer l'offre : " + e.getMessage());
            }
        }
    }

    private void updateStatistics() {
        System.out.println("üìä Mise √† jour des statistiques...");
        Map<String, Integer> stats = statisticsService.getOffresStatistics();
        System.out.println("üìà Statistiques : " + stats);
        
        // Update labels
        totalOffresLabel.setText(String.valueOf(stats.get("total")));
        activeOffresLabel.setText(String.valueOf(stats.get("active")));
        popularDestinationLabel.setText(String.valueOf(stats.get("popular")));

        // Update pie chart
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
            new PieChart.Data("Actives", stats.get("active")),
            new PieChart.Data("Inactives", stats.get("total") - stats.get("active"))
        );
        offresPieChart.setData(pieChartData);
        offresPieChart.setTitle("R√©partition des Offres");

        // Add hover effect on pie chart
        pieChartData.forEach(data -> {
            data.getNode().setOnMouseEntered(e -> {
                data.getNode().setStyle("-fx-pie-color: derive(" + data.getNode().getStyle() + ", 20%);");
            });
            data.getNode().setOnMouseExited(e -> {
                data.getNode().setStyle("");
            });
        });
    }

    // Call this method whenever you add, update, or delete an offer
    public void refreshStatistics() {
        updateStatistics();
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}